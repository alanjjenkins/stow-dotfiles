#!/bin/bash

# Manual tiling
# =============

# Spawn window on the newest receptacle or preselection and switch focus
# to it.  For presels priority is given to the current desktop.
_bspc_query() {
	bspc query -N -n "$@"
}

_query_desktops() {
	bspc query -D -d "$@"
}

recept="$(_bspc_query 'any.leaf.!window')"
presel="$(_bspc_query 'newest.!automatic')"

# Receptacles will not switch focus to the present desktop, whereas
# preselection will.  This way we can develop different workflows (e.g.
# create 3 recept in one desktop, launch 3 GUIs that take time to load,
# switch to another desktop and continue working, until you decide to go
# back to the GUIs).  This has no effect when all actions occur within
# the focused desktop.
#
# Also see my SXHKD bindings for advanced manual tiling actions (refer
# to my dotfiles).
if [ -n "$recept" ]; then
	target="$recept"
	attention="off"
elif [ -n "$presel" ]; then
	target="$presel"
fi

# echo "node=${target:-focused}"
# echo "follow=${attention:-on}"

# Window rules
# ============

# Operate on windows based on their properties.  The positional
# arguments are defined in the `external_rules_command` of `man bspc`.
window_id="$1"
window_class="$2"
window_instance="$3"
window_title="$(xwininfo -id "$window_id" 2>/dev/null | sed ' /^xwininfo/!d ; s,.*"\(.*\)".*,\1,')"

echo "Window ID: $window_id" >> /tmp/bswpm_external_rules_debug.log
echo "Window Class: $window_class" >> /tmp/bswpm_external_rules_debug.log
echo "Window instance: $window_instance" >> /tmp/bswpm_external_rules_debug.log
echo "Window title: $window_title" >> /tmp/bswpm_external_rules_debug.log

OUTPUT=""

case "$window_class" in
  App)
		OUTPUT="$OUTPUT state=floating"
  ;;
	[Mm]pv|[Vv]lc|[Pp]avucontrol|[Ee]o[mg]|[Ff]eh|[Rr]istretto|[Ss]xiv|my_float_window)
		OUTPUT="$OUTPUT state=floating"
		OUTPUT="$OUTPUT center=on"
  ;;
  [Mm]ate-calc)
		OUTPUT="$OUTPUT state=pseudo_tiled"
  ;;
  Slack)
		OUTPUT="$OUTPUT desktop=1"
    TARGET_DESKTOP=1
  ;;
  Alacritty|St|kitty)
		OUTPUT="$OUTPUT desktop=2"
    TARGET_DESKTOP=2
  ;;
  Pinentry-gtk-2)
    OUTPUT="focused=true floating=true"
  ;;
  Chromium|firefox|Brave-browser)
    if [[ "$window_instance" == "Devtools" ]]; then
      OUTPUT=""
    elif [[ "$window_title" == "File Upload" ]]; then
      OUTPUT="state=floating"
    elif [[ "$window_instance" == "Places" ]]; then
      OUTPUT=""
    else
      OUTPUT="$OUTPUT desktop=3"
      TARGET_DESKTOP=3
    fi
  ;;
  "Microsoft Teams - Preview")
		OUTPUT="$OUTPUT desktop=4"
    TARGET_DESKTOP=4
  ;;
  Steam)
    OUTPUT="desktop=0"
    TARGET_DESKTOP=0
  ;;
  Keybase)
    OUTPUT="$OUTPUT state=floating"
  ;;
  steam_app_*)
    if [[ "$window_title" == "Ubisoft Connect" ]]; then
      OUTPUT="$OUTPUT border=off desktop=0"
    else
      OUTPUT="$OUTPUT state=floating desktop=0"
    fi
    TARGET_DESKTOP=0
  ;;
  SteamTinkerLaunch-OpenSettings)
    OUTPUT="$OUTPUT desktop=0"
    TARGET_DESKTOP=0
  ;;
  gamescope)
    OUTPUT="$OUTPUT desktop=0"
    TARGET_DESKTOP=0
  ;;
	* )
    if [[ "$window_title" == "Steam" ]]; then
      OUTPUT="$OUTPUT desktop=0"
      TARGET_DESKTOP=9
    fi
		case "$(xprop -id "$window_id" _NET_WM_WINDOW_TYPE)" in
			*_NET_WM_WINDOW_TYPE_DIALOG*)
				OUTPUT="$OUTPUT state=floating"
      ;;
			*)
				OUTPUT="$OUTPUT state=tiled"
      ;;
		esac
  ;;
esac

# FIXME the "file operations" applies to the `caja` file manager.
# TODO There should be a better way of handling this.
# case "$window_title" in
# 	'File Operations'*)
# 		OUTPUT="$OUTPUT state=floating"
# 		OUTPUT="$OUTPUT center=on"
# 		;;
# 	my_float_window)
# 		OUTPUT="$OUTPUT state=floating"
# 		;;
# esac
if ! _query_desktops "$TARGET_DESKTOP" > /dev/null; then
  if [[ "${TARGET_DESKTOP}" == 1 ]]; then
    bspc monitor "DisplayPort-1" -a "$TARGET_DESKTOP"
  elif [[ "${TARGET_DESKTOP}" == 4 ]]; then
    bspc monitor "DisplayPort-1" -a "$TARGET_DESKTOP"
  elif [[ "${TARGET_DESKTOP}" == 0 ]]; then
    bspc monitor "DisplayPort-0" -a "$TARGET_DESKTOP"
  else
    bspc monitor "$(bspc query -M -m --names)" -a "$TARGET_DESKTOP"
  fi
fi

OUTPUT=$(echo "${OUTPUT}" | xargs)
echo "$OUTPUT"
echo -e "Result: $OUTPUT\n" >>/tmp/bswpm_external_rules_debug.log

echo "$@" >> /tmp/bswpm_external_rules.log
